{
  "hash": "55783b96ce9dfcc997fa0f8dd9a754a0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Plotting art with plotnine\ndate: 2024-07-14\njupyter: python3\nformat: hugo-md\nexecute: \n  freeze: true\n---\n\n\nRecently, I've been helping the plotting library plotnine---a port of ggplot2 to Python. \nplotnine normally is used to make plots for data analysis. But what if I told you there is another option: cobbling up generative art.\n\nIn this post I'll walk through the basics of using plotnine to create generative art. I'll look at three pieces:\n\n* plotting art data\n* removing unecessary `theme()` elements (like axis ticks)\n* examples of folks making generative art\n\nIf you're curious about plotnine and generative art, this is a great opportunity to submit something artsy to the [2024 Plotnine Contest](https://github.com/has2k1/plotnine/discussions/788) (deadline is 26 July 2024).\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show Code\"}\nimport polars as pl\nimport numpy as np\n\nfrom plotnine import *\nfrom mizani.palettes import brewer_pal, gradient_n_pal\n\nnp.random.seed(345678)\n\n# generate random areas for each group to fill per year ---------\n# Note that in the data the x-axis is called Year, and the\n# filled bands are called Group(s)\n\nopts = [0] * 100 + list(range(1, 31))\nvalues = []\nfor ii in range(30):\n    values.extend(np.random.choice(opts, 30, replace=False))\n\n\n# Put all the data together -------------------------------------\nyears = pl.DataFrame({\"Year\": list(range(30))})\ngroups = pl.DataFrame({\"Group\": [f\"grp_{ii}\" for ii in range(30)]})\n\ndf = (\n    years.join(groups, how=\"cross\")\n    .with_columns(Values=pl.Series(values))\n    .with_columns(prop=pl.col(\"Values\") / pl.col(\"Values\").sum().over(\"Year\"))\n)\n\ndf.write_csv(\"plot-data.csv\")\n\n# Generate color palette ----------------------------------------\n# this uses 12 colors interpolated to all 30 Groups\npal = brewer_pal(\"qual\", \"Paired\")\n\ncolors = pal(12)\nnp.random.shuffle(colors)\n\nall_colors = gradient_n_pal(colors)(np.linspace(0, 1, 30))\n\n\n# Plot ---------------------------------------------------------\n(\n    df\n    >> ggplot(aes(\"Year\", \"prop\", fill=\"Group\"))\n    + geom_area()\n    + scale_fill_manual(values=all_colors)\n    + theme(\n        axis_text=element_blank(),\n        line=element_blank(),\n        title=element_blank(),\n        legend_position=\"none\",\n        plot_margin=0,\n        panel_border=element_blank(),\n        panel_background=element_blank(),\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-markdown_strict/cell-2-output-1.png){width=640 height=480}\n:::\n:::\n\n\n(Note that this plot is based on this [r-graph-gallery post](https://r-graph-gallery.com/137-spring-shapes-data-art.html))\n\n## Fetching data\n\nIn order to focus on plotting, I'll use `polars` to import the data used to create the plot above.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\n\ndf = pl.read_csv(\"https://mchow.com/posts/plotnine-art/plot-data.csv\")\n```\n:::\n\n\nThe data is 30 Groups (filled bands) across 30 Years (x-axis), making 900 rows in total:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.head()\n```\n:::\n\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (5, 4)\n┌──────┬───────┬────────┬──────────┐\n│ Year ┆ Group ┆ Values ┆ prop     │\n│ ---  ┆ ---   ┆ ---    ┆ ---      │\n│ i64  ┆ str   ┆ i64    ┆ f64      │\n╞══════╪═══════╪════════╪══════════╡\n│ 0    ┆ grp_0 ┆ 0      ┆ 0.0      │\n│ 0    ┆ grp_1 ┆ 0      ┆ 0.0      │\n│ 0    ┆ grp_2 ┆ 0      ┆ 0.0      │\n│ 0    ┆ grp_3 ┆ 16     ┆ 0.153846 │\n│ 0    ┆ grp_4 ┆ 0      ┆ 0.0      │\n└──────┴───────┴────────┴──────────┘\n```\n:::\n:::\n\n\n<br>\n\nThe height of the band is decided by the `prop` column, which is more likely than not to be 0. This makes the bands often cinch down to nothing and then expand again.\n\n\n## Plotting art data\n\nIn order to plot the data, we'll import `plotnine`, and use the `geom_area()` function, with `Year` on the x-axis, and `prop` on the y-axis.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom plotnine import *\n\n(df >> ggplot(aes(\"Year\", \"prop\", fill=\"Group\")) + geom_area())\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-markdown_strict/cell-6-output-1.png){width=640 height=480}\n:::\n:::\n\n\nNotice that this produced roughly the original art plot, but with two differences:\n\n* The color palette is still the default\n* There are extra elements, like a legend and axis text\n\nIn order to customize the fill colors, we can use some helper functions from the `mizani` library. `mizani` is used behind the scenes by `plotnine`. In the code below, we'll create a 12-color brewer palette, and then interpolate between those colors to be able to fill in all 30 groups.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nfrom mizani.palettes import brewer_pal, gradient_n_pal\n\npal = brewer_pal(\"qual\", \"Paired\")\n\ncolors = pal(12)\nnp.random.shuffle(colors)\n\nall_colors = gradient_n_pal(colors)(np.linspace(0, 1, 30))\n```\n:::\n\n\nNotice that there are two big steps for defining colors:\n\n* `pal = brewer_pal(\"qual\", \"Paired\")` gets the full color brewer palette, and `pal(12)` gets 12 colors from that palette.\n* `gradient_n_pal()` takes those colors, and let's us interpolate between them.\n\nWith custom colors in hand, we can manually set the fill values in `plotnine`:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n(\n    df\n    >> ggplot(aes(\"Year\", \"prop\", fill=\"Group\"))\n    + geom_area()\n    + scale_fill_manual(values=all_colors)\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-markdown_strict/cell-8-output-1.png){width=640 height=480}\n:::\n:::\n\n\nThis is looking much closer, but still has extra plotting elements (like a legend). In the next section, we'll remove these to create a beautiful blank canvas.\n\n## Removing unnecessary elements\n\nIn order to remove unecessary elements, we'll use the `theme()` function.\nThis function allows you to customize various elements (like increasing the size of x- or y-axis ticks). For our purposes, we'll use it to hide most elements.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n(\n    df\n    >> ggplot(aes(\"Year\", \"prop\", fill=\"Group\"))\n    + geom_area()\n    + scale_fill_manual(values=all_colors)\n    + theme(\n        axis_text=element_blank(),\n        line=element_blank(),\n        title=element_blank(),\n        legend_position=\"none\",\n        plot_margin=0,\n        panel_border=element_blank(),\n        panel_background=element_blank(),\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-markdown_strict/cell-9-output-1.png){width=640 height=480}\n:::\n:::\n\n\nNotice everything outside the `geom_area()` fills is now hidden. We also set `plot_margin=0`, so that there wouldn't be an extra band around the plot.\n\n## Putting it all together\n\nHere's all the code in one place, so it's easier to copy and paste (or see [this notebook](https://github.com/machow/mchow.com/blob/main/content/posts/plotnine-art/full-code.ipynb), which also generates the data.).\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport polars as pl\nimport numpy as np\n\nfrom mizani.palettes import brewer_pal, gradient_n_pal\n\ndf = pl.read_csv(\"https://mchow.com/posts/plotnine-art/plot-data.csv\")\n\npal = brewer_pal(\"qual\", \"Paired\")\n\ncolors = pal(12)\nnp.random.shuffle(colors)\n\nall_colors = gradient_n_pal(colors)(np.linspace(0, 1, 30))\n\n(\n    df\n    >> ggplot(aes(\"Year\", \"prop\", fill=\"Group\"))\n    + geom_area()\n    + scale_fill_manual(values=all_colors)\n    + theme(\n        axis_text=element_blank(),\n        line=element_blank(),\n        title=element_blank(),\n        legend_position=\"none\",\n        plot_margin=0,\n        panel_border=element_blank(),\n        panel_background=element_blank(),\n    )\n)\n```\n:::\n\n\n## Learning more\n\n* [Making art in Python with plotnine by Nicola Rennie](https://nrennie.rbind.io/blog/making-art-python-plotnine/)\n* [plotnine.org docs](https://plotnine.org/)\n* [Getting started with generative art in R](https://towardsdatascience.com/getting-started-with-generative-art-in-r-3bc50067d34b)\n* [Generative work by Thomas Lin Pedersen, ggplot2 maintainer](https://thomaslinpedersen.art/work/)\n\n\n## In conclusion\n\nGenerative art is a neat area, and we have just scratched the surface---by looking at how to represent data art using `plotnine`. If you want to try your hand at generating art in `plotnine`, please consider submitting to the [2024 Plotnine Contest](https://github.com/has2k1/plotnine/discussions/788) (deadline 26 July 2024)!\n\n",
    "supporting": [
      "index_files/figure-markdown_strict"
    ],
    "filters": [],
    "includes": {}
  }
}